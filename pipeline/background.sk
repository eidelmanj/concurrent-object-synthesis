struct Node {
  int val;
  Node next;
}


struct List {
  Node first;
  Node last;
}

  Node newNode() {
    Node newN = new Node();
    newN.next = null;
    return newN;
  }

List newList() {
  List newL = new List();
  newL.first = null;
  newL.last = null;
  return newL;
}
  
int add(List l, int newVal) {
  Node newN = newNode();
  
  newN.val = newVal;

  if (l.first==null) {
    l.first = newN;
    l.last = newN;
  }
  else {
    l.last.next = newN;
    l.last =  newN;
  }

  return newVal;

}

int get(List l, int idx) {
  Node cur = l.first;
  
  int i = 0;
  while (cur!=null) {
    if (i==idx)
      return cur.val;
    cur = cur.next;
    i = i + 1;
  }

  return -100;
}


int remove(List l, int idx) {
  Node cur = l.first;
  Node toRemove;
  
  int i = 0;
  while (cur!=null) {
    if (i==idx-1) {
      toRemove = cur.next;
      cur.next = cur.next.next;
      if (l.last == toRemove)
	l.last = cur.next;
      return toRemove.val;
    }
    i = i - 1;
  }

  return -100;
}

  

/* int copy(List l1, List l2, int idx) { */
/*   int tmp; */
/*   tmp = get(l1, idx); */
/*   add(l2, tmp); */
/*   remove(l1, idx); */
  
/*   return tmp; */
/* } */




ORIGINAL

SKETCH








harness void blah() {

  List l1 = newList();
  List l2 = newList();

  List l1prime = newList();
  List l2prime = newList();

  add(l1, 1);
  add(l1, 2);
  add(l1, 3);
  add(l1, 4);

  int a = copy(l1, l2, 1);


  add(l1prime, 1);
  add(l1prime, 2);
  add(l1prime, 3);
  add(l1prime, 4);

  int b = copySKETCH(l1prime, l2prime, 1);
  assert(a == b);

  a = copy(l1, l2, 1);
  b = copySKETCH(l1prime, l2prime, 1);

  assert(a == b);

  Node cur1 = l1.first;
  Node cur2 = l1prime.first;
  while (cur1!=null) {
    assert(cur1.val == cur2.val);
    cur1 = cur1.next;
    cur2 = cur2.next;
  }
  assert(cur2 == null);

  cur1 = l2.first;
  cur2 = l2prime.first;
  while (cur1!=null) {
    assert(cur1.val == cur2.val);
    cur1 = cur1.next;
    cur2 = cur2.next;
  }
  assert(cur2 == null);
}  

  


  
